{"version":3,"sources":["components/tableHeader.jsx","components/tableBody.jsx","components/moviesTable.jsx","components/pagination.jsx","components/searchBox.jsx","services/httpService.js","services/moviesService.js","components/customDropDown.jsx","components/movies.jsx","utils/utils.js","services/genreService.js","components/movieForm.jsx","App.js","serviceWorker.js","components/footer.jsx","components/navBar.jsx","index.js","spinner-loading.svg"],"names":["TableHeader","handleSort","sortColumnPath","newSortColumn","Object","objectSpread","_this","props","sortColumn","path","order","onSort","renderIcon","name","react_default","a","createElement","className","_this2","this","columns","map","singleColumn","scope","key","label","onClick","columnName","Component","TableBody","genresMap","console","log","data","singleMovie","id","src","poster_path","alt","Link","to","concat","title","release_date","vote_average","genre_ids","item","nl2br","get","MoviesTable","tableHeader","tableBody","moviesList","LEFT_PAGE","RIGHT_PAGE","Pagination","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","fetchPageNumbers","totalPages","currentPage","state","pageNeighbours","totalNumbers","startPage","Math","max","endPage","min","pages","_","range","hasLeftSpill","hasRightSpill","spillOffset","length","extraPages","toConsumableArray","gotoPage","page","onPageChanged","paginationData","setState","handleClick","evt","preventDefault","handleMoveLeft","handleMoveRight","_props$itemsCount","itemsCount","_props$pageLimit","pageLimit","_props$pageNeighbours","ceil","someProp","_ref","aria-label","index","aria-hidden","SearchBox","searchQuery","onChange","type","placeholder","value","e","currentTarget","axios","interceptors","response","use","error","status","toast","Promise","reject","httpService","post","put","delete","get_Num_Movies_Pages","year","http","moviesURL","getPageMovies","pageNum","customDropDown","items","selectedItem","onItemSelect","placeholderText","dist_default","options","Movies","movies","genres","pageSize","selectedGenre","Map","years","selectedYear","Date","getFullYear","isLoading","handleGenreSelect","genre","handleYearSelect","getComponentContent","handleSearch","query","handlePageChange","getPreparedData","filteredMovies","filter","m","toLowerCase","startsWith","toString","genreKey","entries","_ref2","slicedToArray","parseInt","includes","sortedMovies","orderBy","pageMovies","pageNumber","startIndex","slice","take","paginate","totalCount","getGenrePairs","localStorage","getItem","hydrateStateWithLocalStorage","window","addEventListener","saveStateToLocalStorage","bind","removeEventListener","setItem","JSON","stringify","hasOwnProperty","parse","defineProperty","genresUrl","all_genres_pairs","allGenresMap","i","values","allMovies","results","total_pages","getAllMovies","_this$getPreparedData","allYears","arr","push","getYears","components_customDropDown","searchBox","moviesTable","pagination","MovieForm","cast","match","params","movieInfo","apiKey","getCast","setBackgroundImage","backdrop_path","document","body","style","backgroundImage","backdropIMG","backgroundSize","repeat","genreList","genreNames","forEach","element","companiesList","companiesNames","castList","height","original_title","tagline","overview","getGenreNames","getCastNames","getProductionCompanies","production_companies","runtime","revenue","Number","toLocaleString","budget","adult","App","BrowserRouter","basename","process","Switch","Route","component","Boolean","location","hostname","Footer","href","customStyles","content","top","left","right","bottom","marginRight","transform","padding","NavBar","modalIsOpen","openModal","assertThisInitialized","closeModal","data-toggle","data-target","react_modal_lib_default","isOpen","onRequestClose","role","data-dismiss","ReactDOM","render","Fragment","navBar","src_App_0","footer","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.1574c4ea.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass TableHeader extends Component {\n  /**\n   *\n   */\n  handleSort = sortColumnPath => {\n    const newSortColumn = { ...this.props.sortColumn };\n    newSortColumn.path = sortColumnPath;\n    if (sortColumnPath === this.props.sortColumn.path) {\n      newSortColumn.order =\n        this.props.sortColumn.order === \"desc\" ? \"asc\" : \"desc\";\n    } else {\n      newSortColumn.order = \"asc\";\n    }\n    this.props.onSort(newSortColumn);\n  };\n\n  /**\n   * param:name of the column\n   * check if the column not the one of sort , if so neglect it\n   * if it is the sort column then check order to render the icon of order\n   */\n  renderIcon = name => {\n    if (name !== this.props.sortColumn.path) {\n      return null;\n    }\n    if (this.props.sortColumn.order === \"desc\")\n      return <i className=\"fa fa-sort-desc\" />;\n    return <i className=\"fa fa-sort-asc\" />;\n  };\n\n  render() {\n    return (\n      <thead>\n        <tr>\n          {this.props.columns.map(singleColumn => (\n            <th\n              scope=\"col\"\n              className=\"movies-tb-header\"\n              key={singleColumn.label}\n              onClick={() => this.handleSort(singleColumn.columnName)}\n            >\n              {singleColumn.label} {this.renderIcon(singleColumn.columnName)}\n            </th>\n          ))}\n        </tr>\n      </thead>\n    );\n  }\n}\n\nexport default TableHeader;\n","import React, { Component } from \"react\";\nimport nl2br from \"react-newline-to-break\";\nimport { Link } from \"react-router-dom\";\nclass TableBody extends Component {\n  render() {\n    if (this.props.genresMap === null) {\n      console.log(\"returning null .............\" + this.props.data);\n      return null;\n    }\n    return (\n      <tbody>\n        {this.props.data.map(singleMovie => (\n          <tr key={singleMovie.id}>\n            <td>\n              <img\n                src={\n                  \"https://image.tmdb.org/t/p/w92/\" + singleMovie.poster_path\n                }\n                className=\"img-fluid\"\n                alt=\"movie poster\"\n              />{\" \"}\n            </td>\n            <td>\n              <Link\n                className=\"movie-meta-data title\"\n                to={`/movies/${singleMovie.id}`}\n              >\n                {singleMovie.title}\n              </Link>\n            </td>\n            <td className=\"movie-meta-data\">{singleMovie.release_date}</td>\n            <td className=\"movie-meta-data rate\">{singleMovie.vote_average}</td>\n            <td className=\"movie-meta-data genre\">\n              {singleMovie !== null\n                ? singleMovie.genre_ids.map(item =>\n                    nl2br(this.props.genresMap.get(item) + \"\\n\")\n                  )\n                : \"\"}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    );\n  }\n}\n\nexport default TableBody;\n","import React, { Component } from \"react\";\nimport TableHeader from \"./tableHeader\";\nimport TableBody from \"./tableBody\";\nimport \"../index.css\";\n\nclass MoviesTable extends Component {\n  render() {\n    return (\n      <div className=\"cardcont col-xs-12 col-md-11 col-lg-10 col-centered \">\n        <div className=\"table-responsive\">\n          <table className=\"table \">\n            <TableHeader\n              columns={this.props.columns}\n              onSort={this.props.onSort}\n              sortColumn={this.props.sortColumn}\n            />\n            <TableBody\n              data={this.props.moviesList}\n              genresMap={this.props.genresMap}\n            />\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MoviesTable;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nconst LEFT_PAGE = \"LEFT\";\nconst RIGHT_PAGE = \"RIGHT\";\n\nclass Pagination extends Component {\n  /**\n   *\n   * initialize the base attributes of pagination :\n   * pageLimit :max num of items per page\n   * itemsCount :total number of movies to be divided over pages\n   * pageNeighbours : num of page numbers beside current page (right & left)\n   * totaPages : number of pages for all movies\n   * finally , set current page to 1 as state\n   */\n  constructor(props) {\n    super(props);\n    const { itemsCount = null, pageLimit = 10, pageNeighbours = 0 } = props;\n    this.pageLimit = typeof pageLimit === \"number\" ? pageLimit : 10;\n    this.itemsCount = typeof itemsCount === \"number\" ? itemsCount : 0;\n    // pageNeighbours can be: 0, 1 or 2\n    this.pageNeighbours =\n      typeof pageNeighbours === \"number\"\n        ? Math.max(0, Math.min(pageNeighbours, 2))\n        : 0;\n    this.totalPages = Math.ceil(this.itemsCount / this.pageLimit);\n\n    this.state = { currentPage: this.props.currentPage };\n  }\n\n  /**\n   * start the app on the selected current page\n   */\n  componentDidMount() {\n    this.gotoPage(this.state.currentPage);\n  }\n\n  /***\n   * update the component with the new received props\n   */\n  componentWillReceiveProps({ someProp }) {\n    this.setState({ ...this.state, someProp });\n  }\n\n  /**\n   * Let's say we have 10 pages and we set pageNeighbours to 2\n   * Given that the current page is 6\n   * The pagination control will look like the following:\n   *\n   * (1) < {4 5} [6] {7 8} > (10)\n   *\n   * (x) => terminal pages: first and last page(always visible)\n   * [x] => represents current page\n   * {...x} => represents page neighbours\n   */\n  fetchPageNumbers = () => {\n    const totalPages = this.totalPages;\n    const currentPage = this.state.currentPage;\n    const pageNeighbours = this.pageNeighbours;\n\n    /**\n     * totalNumbers: the total page numbers to show on the control\n     * totalNumbers: (2 neighbors right + 2 on left ) + current page + 2 terminal pages\n     * totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls\n     */\n    const totalNumbers = this.pageNeighbours * 2 + 3;\n    const totalBlocks = totalNumbers + 2;\n\n    /**\n     * when pages need to be hidden (num of blocks not enough for num of pages)\n     * */\n    if (totalPages > totalBlocks) {\n      const startPage = Math.max(2, currentPage - pageNeighbours);\n      const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\n      let pages = _.range(startPage, endPage + 1);\n\n      /**\n       * hasLeftSpill: has hidden pages to the left\n       * hasRightSpill: has hidden pages to the right\n       * spillOffset: number of hidden pages either to the left or to the right\n       */\n      const hasLeftSpill = startPage > 2;\n      const hasRightSpill = totalPages - endPage > 1;\n      const spillOffset = totalNumbers - (pages.length + 1);\n\n      switch (true) {\n        // handle: (1) < {5 6} [7] {8 9} (10)\n        case hasLeftSpill && !hasRightSpill: {\n          const extraPages = _.range(startPage - spillOffset, startPage - 1);\n          pages = [LEFT_PAGE, ...extraPages, ...pages];\n          break;\n        }\n\n        // handle: (1) {2 3} [4] {5 6} > (10)\n        case !hasLeftSpill && hasRightSpill: {\n          const extraPages = _.range(endPage + 1, endPage + spillOffset);\n          pages = [...pages, ...extraPages, RIGHT_PAGE];\n          break;\n        }\n\n        // handle: (1) < {4 5} [6] {7 8} > (10)\n        case hasLeftSpill && hasRightSpill:\n        default: {\n          pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\n          break;\n        }\n      }\n\n      return [1, ...pages, totalPages];\n    }\n\n    return _.range(1, totalPages + 1);\n  };\n\n  /**\n   * set state with the new current page &\n   * pass handle change method\n   */\n  gotoPage = page => {\n    const { onPageChanged } = this.props;\n    const currentPage = Math.max(0, Math.min(page, this.totalPages));\n    const paginationData = { currentPage, totalPages: this.totalPages };\n    this.setState({ currentPage }, () => onPageChanged(paginationData));\n  };\n\n  /**\n   * handles click of each page , just call gotoPage method\n   * page : # of page\n   */\n  handleClick = page => evt => {\n    evt.preventDefault();\n    this.gotoPage(page);\n  };\n\n  /**\n   *  (1) < ={10 11} [12] {13 14}= > (23) , left means get the previous set of 5 pages\n   *  (1) < ={5 6} [7] {8 9}= > (23)\n   */\n  handleMoveLeft = evt => {\n    evt.preventDefault();\n    this.gotoPage(this.state.currentPage - this.pageNeighbours * 2 - 1);\n  };\n\n  /**\n   *  (1) < ={10 11} [12] {13 14}= > (23) , right means get the next set of 5 pages\n   *  (1) < ={15 16} [17] {18 19}= > (23)\n   */\n  handleMoveRight = evt => {\n    evt.preventDefault();\n    this.gotoPage(this.state.currentPage + this.pageNeighbours * 2 + 1);\n  };\n\n  render() {\n    const { currentPage } = this.state;\n    const pages = this.fetchPageNumbers();\n    return (\n      <div className=\"col-xs-12 col-md-11 col-lg-10 col-centered  pages \">\n        <nav aria-label=\"pagination\">\n          <ul className=\"pagination\">\n            {pages.map((page, index) => {\n              if (page === LEFT_PAGE)\n                return (\n                  <li key={index} className=\"page-item\">\n                    <button\n                      className=\"page-link\"\n                      aria-label=\"Previous\"\n                      onClick={this.handleMoveLeft}\n                    >\n                      <span aria-hidden=\"true\">&laquo;</span>\n                      <span className=\"sr-only\">Previous</span>\n                    </button>\n                  </li>\n                );\n\n              if (page === RIGHT_PAGE)\n                return (\n                  <li key={index} className=\"page-item\">\n                    <button\n                      className=\"page-link\"\n                      aria-label=\"Next\"\n                      onClick={this.handleMoveRight}\n                    >\n                      <span aria-hidden=\"true\">&raquo;</span>\n                      <span className=\"sr-only\">Next</span>\n                    </button>\n                  </li>\n                );\n\n              return (\n                <li\n                  key={index}\n                  className={`page-item${\n                    currentPage === page ? \" active\" : \"\"\n                  }`}\n                >\n                  <button\n                    className=\"page-link\"\n                    onClick={this.handleClick(page)}\n                  >\n                    {page}\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default Pagination;\n","import React from \"react\";\n\nconst SearchBox = ({ searchQuery, onChange }) => {\n  return (\n    <input\n      type=\"text\"\n      className=\"form-control my-3\"\n      placeholder=\"Search...\"\n      value={searchQuery}\n      onChange={e => onChange(e.currentTarget.value)}\n    />\n  );\n};\n\nexport default SearchBox;\n","import axios from \"axios\";\n// import logger from \"./logService\";\nimport { toast } from \"react-toastify\";\n\naxios.interceptors.response.use(null, error => {\n  const expectedError =\n    error.response &&\n    error.response.status >= 400 &&\n    error.response.status < 500;\n\n  if (!expectedError) {\n    // logger.log(error);\n    toast.error(\"An unexpected error occurrred.\");\n  }\n\n  return Promise.reject(error);\n});\n\nexport default {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete\n};\n","import { apiKey, movieInfo, moviesURL } from \"../config.json\";\nimport http from \"./httpService\";\n\nexport function get_Num_Movies_Pages(year) {\n  return http.get(moviesURL + year);\n}\n\n/**\n * 1- get num of pages\n * 2-loop over this num of pages\n * 3- append movies of each page to the current movies list\n * 4- return this list\n */\nexport function getPageMovies(pageNum, year) {\n  return http.get(moviesURL + year + \"&page=\" + pageNum);\n}\n\nexport function getMovieInfo(id) {\n  return http.get(movieInfo + id + \"?\" + apiKey);\n}\n\nexport function getMovieCast(id) {\n  return http.get(movieInfo + id + \"/casts?\" + apiKey);\n}\n","import React from \"react\";\nimport Dropdown from \"react-dropdown\";\nimport \"react-dropdown/style.css\";\nconst customDropDown = props => {\n  const { items, selectedItem, onItemSelect, placeholderText } = props;\n  return (\n    <Dropdown\n      options={items}\n      value={selectedItem}\n      onChange={onItemSelect}\n      placeholder={placeholderText}\n    />\n  );\n};\n\nexport default customDropDown;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport MoviesTable from \"./moviesTable\";\nimport Pagination from \"./pagination\";\nimport { paginate, getYears } from \"../utils/utils\";\nimport SearchBox from \"./searchBox\";\nimport { get_Num_Movies_Pages, getPageMovies } from \"../services/moviesService\";\nimport CustomDropDown from \"./customDropDown\";\nimport { getAllGenres } from \"../services/genreService\";\nimport loading from \"../spinner-loading.svg\";\n\nclass Movies extends Component {\n  state = {\n    movies: [],\n    genres: [],\n    pageSize: 10,\n    currentPage: 1,\n    searchQuery: \"\",\n    selectedGenre: null,\n    genresMap: new Map(),\n    sortColumn: { path: \"vote_average\", order: \"desc\" },\n    totalPages: null,\n    years: [],\n    selectedYear: new Date().getFullYear(),\n    isLoading: true\n  };\n\n  columns = [\n    { columnName: \"poster\", label: \"\" },\n    { columnName: \"title\", label: \"Title\" },\n    { columnName: \"release_date\", label: \"Release Date\" },\n    { columnName: \"vote_average\", label: \"Rate\" },\n    { columnName: \"genre_ids\", label: \"Genre\" }\n  ];\n\n  /**\n   * first , initializes Genres then ,\n   * if there is a state saved in local storage get this state\n   * else , refresh the component with the movies of current selected year\n   * add event listener to save state to localStorage when user refreshes the page\n   */\n  async componentDidMount() {\n    this.getGenrePairs();\n    if (localStorage.getItem(\"movies\")) this.hydrateStateWithLocalStorage();\n    else this.getComponentContent(this.state.selectedYear);\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  /**\n   * add event listener to save state to localStorage when user leaves the page\n   */\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n    // saves if component has a chance to unmount\n    this.saveStateToLocalStorage();\n  }\n\n  /**\n   * loop on each item in the state , save it in local storage\n   */\n  saveStateToLocalStorage() {\n    for (let key in this.state) {\n      if (key === \"genresMap\") continue;\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n  /**\n   * get the saved state from local storage\n   */\n  hydrateStateWithLocalStorage() {\n    // for all items in state\n    for (let key in this.state) {\n      if (key === \"genresMap\") continue;\n      // if the key exists in localStorage\n      if (localStorage.hasOwnProperty(key)) {\n        // get the key's value from localStorage\n        let value = localStorage.getItem(key);\n        // parse the localStorage string and setState\n        try {\n          value = JSON.parse(value);\n          this.setState({ [key]: value });\n        } catch (e) {\n          // handle empty string\n          this.setState({ [key]: value });\n        }\n      }\n    }\n  }\n\n  /**\n   * get all genres values from the API then add the initial value at first\n   * create map of these pairs , then get names only from these pairs\n   * set state with the new values\n   */\n  async getGenrePairs() {\n    const { data } = await getAllGenres();\n    const all_genres_pairs = [{ id: 0, name: \"All Genres\" }, ...data.genres];\n    let allGenresMap = new Map(all_genres_pairs.map(i => [i.id, i.name]));\n    const genres = [...allGenresMap.values()];\n    this.setState({ genres, genresMap: allGenresMap });\n  }\n\n  /**\n   *\n   * @param {number} pages total number of pages to get from API\n   * @param {number} year the selected year to get its movies\n   * loop on pages , foreach page get its movies , add page movies to all movies\n   * set state with the movies val , set is loading to false to hide loading sign\n   */\n  async getAllMovies(pages, year) {\n    let allMovies = \"\";\n    for (let index = 1; index <= pages; index++) {\n      const { data } = await getPageMovies(index, year);\n      const movies = data.results;\n      allMovies = [...allMovies, ...movies];\n    }\n    this.setState({ movies: allMovies }, () =>\n      this.setState({ isLoading: false })\n    );\n  }\n\n  /**\n   *\n   * @param {number} year the current selected year\n   * get total number of pages of the selected year movies\n   * if it exceeds 50 then set it to 50 else keep it\n   * get movies of these pages\n   */\n  async getComponentContent(year) {\n    const { data } = await get_Num_Movies_Pages(year);\n    const totalPages = data.total_pages > 50 ? 50 : data.total_pages;\n    this.getAllMovies(totalPages, year);\n  }\n\n  /**\n   * handles Genre Selection, by updating state with the selected one\n   */\n  handleGenreSelect = genre => {\n    this.setState({ selectedGenre: genre, currentPage: 1, searchQuery: \"\" });\n  };\n\n  /**\n   * handle year selection by updating the state ,\n   * then get component content after setting state directly\n   */\n  handleYearSelect = year => {\n    this.setState(\n      {\n        isLoading: true,\n        selectedYear: year.value,\n        selectedGenre: this.state.selectedGenre,\n        currentPage: 1,\n        searchQuery: \"\"\n      },\n      () => {\n        this.getComponentContent(year.value);\n      }\n    );\n  };\n\n  /**\n   * Param:column of path & order to sort the table regarding it\n   */\n  handleSort = newSortColumn => {\n    this.setState({ sortColumn: newSortColumn });\n  };\n\n  /**\n   * update the search query val with the query val , reset genre and page\n   */\n  handleSearch = query => {\n    this.setState({ searchQuery: query, selectedGenre: null, currentPage: 1 });\n  };\n\n  /**\n   * update the current page with the selected one\n   */\n  handlePageChange = data => {\n    const { currentPage, totalPages } = data;\n    this.setState({ currentPage, totalPages });\n  };\n\n  /**\n   * preparing the data to be passed to render method\n   * 1- fitler movise due to search query in search box if exist\n   * 2- if not exist then filter Movies by genres\n   * 3- sort the filtered ones\n   * 4- paginate : slice movies from all movies according to page size\n   * return : total count of page movies , page movies objects\n   */\n  getPreparedData = () => {\n    let filteredMovies = this.state.movies;\n\n    console.log(\"fitlered Movies: \" + filteredMovies);\n    if (this.state.searchQuery) {\n      filteredMovies = this.state.movies.filter(m =>\n        m.title\n          .toLowerCase()\n          .startsWith(this.state.searchQuery.toString().toLowerCase())\n      );\n    } else {\n      let genreKey = \"\";\n      if (this.state.selectedGenre) {\n        genreKey = [...this.state.genresMap.entries()]\n          .filter(({ 1: v }) => v === this.state.selectedGenre.value)\n          .map(([k]) => k);\n        genreKey = parseInt(genreKey, 10);\n      }\n\n      filteredMovies =\n        this.state.selectedGenre && genreKey !== 0\n          ? this.state.movies.filter(m => m.genre_ids.includes(genreKey))\n          : this.state.movies;\n    }\n    console.log(\"fitlered Movies-2: \" + filteredMovies);\n\n    const sortedMovies = _.orderBy(\n      filteredMovies,\n      this.state.sortColumn.path,\n      this.state.sortColumn.order\n    );\n    console.log(\"stored Movies: \" + sortedMovies);\n\n    const pageMovies = paginate(\n      sortedMovies,\n      this.state.currentPage,\n      this.state.pageSize\n    );\n    console.log(\"page Movies: \" + pageMovies);\n\n    return { totalCount: filteredMovies.length, data: pageMovies };\n  };\n\n  render() {\n    const { totalCount, data } = this.getPreparedData();\n    let allYears = getYears();\n    console.log(\"totalCount : \" + totalCount);\n    console.log(\"data : \" + data);\n\n    // if (!totalCount || !data || this.state.isLoading) {\n    //   return (\n    //     <div className=\"loading\">\n    //       <header className=\"App-header\">\n    //         <p>loading.......</p>\n    //         <img src={loading} className=\"App-loading\" alt=\"loading\" />\n    //       </header>\n    //     </div>\n    //   );\n    // }\n    return (\n      <div className=\"row justify-content-center padding-outer\">\n        <div className=\"col-xs-12 col-md-11 col-lg-10 col-centered\">\n          <div className=\"row justify-content-md-center cardcont-f\">\n            <div className=\" col-lg-3 col-md-4\">\n              <p className=\"label\">Select Year </p>\n              <CustomDropDown\n                items={allYears}\n                onItemSelect={this.handleYearSelect}\n                placeholderText={this.state.selectedYear}\n              />\n            </div>\n            <div className=\"col-lg-4 col-md-4\">\n              <p className=\"label\">Select Genre </p>\n              <CustomDropDown\n                items={this.state.genres}\n                selectedItem={this.state.selectedGenre}\n                onItemSelect={this.handleGenreSelect}\n                placeholderText=\"All Genres\"\n              />\n            </div>\n            <div className=\"col-lg-5 col-md-4\">\n              <p className=\"label\">\n                showing{\" \"}\n                <span className=\"label-val\">{this.state.movies.length}</span>{\" \"}\n                movies\n              </p>\n              <SearchBox\n                value={this.state.searchQuery}\n                onChange={this.handleSearch}\n              />\n            </div>\n          </div>\n        </div>\n        <MoviesTable\n          moviesList={data}\n          genresMap={this.state.genresMap}\n          columns={this.columns}\n          sortColumn={this.state.sortColumn}\n          onSort={this.handleSort}\n        />\n        <Pagination\n          itemsCount={totalCount}\n          pageLimit={this.state.pageSize}\n          pageNeighbours={2}\n          currentPage={this.state.currentPage}\n          onPageChanged={this.handlePageChange}\n          key={totalCount}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Movies;\n","import _ from \"lodash\";\n\n//pagination method : test\nexport function paginate(items, pageNumber, pageSize) {\n  const startIndex = (pageNumber - 1) * pageSize;\n  return _(items)\n    .slice(startIndex)\n    .take(pageSize)\n    .value();\n}\n\nexport function getYears() {\n  var firstYear = \"1920\";\n  var currentYear = new Date().getFullYear();\n  let arr = [];\n  for (let i = currentYear; i >= firstYear; i--) arr.push(i);\n  return [\"All Years\", ...arr];\n}\n","import { genresUrl } from \"../config.json\";\nimport http from \"./httpService\";\nexport function getAllGenres() {\n  return http.get(genresUrl);\n}\n","import React, { Component } from \"react\";\nimport { getMovieInfo, getMovieCast } from \"../services/moviesService\";\nclass MovieForm extends Component {\n  state = { data: \"\", cast: [] };\n\n  /**\n   * get all info of the current movie through the API\n   * get staff of the current Movie then update state & set background\n   */\n  async componentDidMount() {\n    const { data } = await getMovieInfo(this.props.match.params.id);\n    this.getCast();\n    this.setState({ data });\n    this.setBackgroundImage(\n      \"https://image.tmdb.org/t/p/original\" + this.state.data.backdrop_path\n    );\n  }\n\n  /**\n   * remove the background(current movie poster) when unmount so that,\n   * it could not be set for the parent Component (movie component)\n   */\n  componentWillUnmount() {\n    document.body.style.backgroundImage = \"\";\n  }\n\n  /**\n   * get staff of the current movie\n   * set cast state\n   */\n  async getCast() {\n    const { data } = await getMovieCast(this.props.match.params.id);\n    this.setState({ cast: data });\n  }\n\n  /**\n   * set the background of current movie\n   * @param {string} path path of the image online\n   */\n  setBackgroundImage(path) {\n    let backdropIMG = path;\n    document.body.style.backgroundImage = \"url(\" + backdropIMG + \")\";\n    document.body.style.backgroundSize = \"cover\";\n    document.body.style.repeat = \"no-repeat\";\n  }\n\n  /**\n   * get genres names from list of genres objects\n   * @param {array} genreList array of genres objs\n   * returns : list of comma seprated genre names (for current movie)\n   */\n  getGenreNames(genreList) {\n    let genreNames = \"\";\n    if (genreList) {\n      genreList.forEach(element => {\n        if (genreNames !== \"\") genreNames += \" , \";\n        genreNames += element.name;\n      });\n    }\n    return genreNames;\n  }\n\n  /**\n   * get production companies names from list of prod comps objs\n   * @param {array} companiesList array of comps objs\n   * returns : list of comma seprated prod companies names\n   */\n  getProductionCompanies(companiesList) {\n    let companiesNames = \"\";\n    if (companiesList) {\n      companiesList.forEach(element => {\n        if (companiesNames !== \"\") companiesNames += \" , \";\n        companiesNames += element.name;\n      });\n    }\n    return companiesNames;\n  }\n\n  /**\n   * get cast names from list of cast objs\n   * @param {array} castList array of cast objs\n   * returns : just first 4 names of actors from cast\n   */\n  getCastNames(castList) {\n    let cast = \"\";\n    if (castList) {\n      castList.slice(0, 4).forEach(element => {\n        if (cast !== \"\") cast += \" , \";\n        cast += element.name;\n      });\n    }\n    return cast;\n  }\n\n  render() {\n    return (\n      <div className=\"row justify-content-center padding-outer\">\n        <div className=\"cardcont col-xs-12 col-md-12 col-lg-10 padding-inner\">\n          <div className=\"row flex-column-reverse flex-sm-row\">\n            <div className=\"col-md-6 col-lg-6\">\n              <img\n                id=\"posterContent\"\n                className=\"poster img-fluid\"\n                src={\n                  \"https://image.tmdb.org/t/p/w500/\" +\n                  this.state.data.poster_path\n                }\n                style={{ height: \"auto\" }}\n                alt=\"Poster Content\"\n              />\n            </div>\n            <div className=\"col-md-6 col-lg-6\">\n              <div className=\"meta-data\">\n                <h1 className=\"movie-title\">\n                  {this.state.data.original_title}\n                </h1>\n                <span className=\"tagline subtitles\">\n                  {this.state.data.tagline}\n                </span>\n                <p className=\"overview\">{this.state.data.overview}</p>\n                <div>\n                  <span className=\"genre-list subtitles\">\n                    {this.getGenreNames(this.state.data.genres)}\n                  </span>\n                  <span className=\"cast\">\n                    {this.getCastNames(this.state.cast.cast)}\n                  </span>\n                  <br /> <br />\n                  <span className=\"production-list prod\">\n                    {this.getProductionCompanies(\n                      this.state.data.production_companies\n                    )}\n                  </span>\n                  <br /> <br />\n                  <div className=\"row nopadding release-details\">\n                    <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6 meta-data-element\">\n                      <span className=\"subtitles\">Original Release:</span>\n                      <span className=\"meta-data-val\">\n                        {this.state.data.release_date}\n                      </span>\n                    </div>\n                    <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6 meta-data-element\">\n                      <span className=\"subtitles\">Running Time:</span>\n                      <span className=\"meta-data-val\">\n                        {this.state.data.runtime} mins\n                      </span>\n                    </div>\n                    <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6 meta-data-element\">\n                      <span className=\"subtitles\">Box Office:</span>\n                      <span className=\"meta-data-val\">\n                        {this.state.data.revenue > 0\n                          ? Number(this.state.data.revenue).toLocaleString(\n                              \"en\"\n                            ) + \" $\"\n                          : \"N/A\"}\n                      </span>\n                    </div>\n                    <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6 meta-data-element\">\n                      <span className=\"subtitles\">Vote Average:</span>\n                      <span className=\"meta-data-val\">\n                        {this.state.data.vote_average + \" /10\"}\n                      </span>\n                    </div>\n                    <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6 meta-data-element\">\n                      <span className=\"subtitles\">Budget:</span>\n                      <span className=\"meta-data-val\">\n                        {this.state.data.budget < 0\n                          ? Number(this.state.data.budget).toLocaleString(\n                              \"en\"\n                            ) + \" $\"\n                          : \"N/A\"}\n                      </span>\n                    </div>\n                    <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6 meta-data-element\">\n                      <span className=\"subtitles\">Adult only:</span>\n                      <span className=\"meta-data-val\">\n                        {this.state.data.adult ? \"Yes\" : \"No\"}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MovieForm;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Movies from \"./components/movies\";\nimport { Route, Redirect, Switch, BrowserRouter } from \"react-router-dom\";\nimport MovieForm from \"./components/movieForm\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        {/* adding the basename prop fixes the problem of no rendered content on github pages\n      https://medium.com/@Dragonza/react-router-problem-with-gh-pages-c93a5e243819 */}\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <Switch>\n            <Route path=\"/movies/:id\" component={MovieForm} />\n            <Route path=\"/movies\" component={Movies} />\n            <Route path=\"/\" component={Movies} />\n            {/* <Redirect from=\"/\" exact to=\"/movies\" /> */}\n          </Switch>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nconst Footer = () => {\n  return (\n    <footer className=\"footer page-footer font-small blue\">\n      <div className=\"footer-text footer-copyright text-center \">\n        {\" \"}\n        <a\n          className=\"footer-link\"\n          href=\"https://www.linkedin.com/in/amr-gamal-11901a33/\"\n        >\n          {\" \"}\n          © Developed by Amr Gamal\n        </a>\n        <br />\n        <a\n          className=\"footer-link\"\n          href=\"https://github.com/amrgamal91/Top-Movies\"\n        >\n          <i className=\"fa fa-github\" aria-hidden=\"true\" /> View code\n        </a>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport Modal from \"react-modal\";\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    padding: 0\n  }\n};\n\nclass NavBar extends Component {\n  constructor() {\n    super();\n    this.state = {\n      modalIsOpen: false\n    };\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  openModal() {\n    this.setState({ modalIsOpen: true });\n  }\n\n  closeModal() {\n    this.setState({ modalIsOpen: false });\n  }\n  render() {\n    return (\n      /** navigation bar */\n      <nav className=\"navbar navbar-expand-lg navbar-light nav hidden-phone\">\n        <a className=\"navbar-brand navbrand\" href=\"#\">\n          <i className=\"fa fa-video-camera\" aria-hidden=\"true\" /> Top Movies\n        </a>\n        <span className=\"navbar-text\">Enjoy Watching </span>\n        <button\n          type=\"button\"\n          className=\"btn btn-danger btn-circle\"\n          data-toggle=\"modal\"\n          data-target=\"#infoModal\"\n          onClick={this.openModal}\n        >\n          <i className=\"fa fa-info-circle info\" />\n        </button>\n        {/* Modal Container \n            https://www.npmjs.com/package/react-modal\n         */}\n        <div>\n          <Modal\n            isOpen={this.state.modalIsOpen}\n            onRequestClose={this.closeModal}\n            style={customStyles}\n          >\n            <div className=\"modal-dialog\" role=\"document\">\n              <div className=\"modal-content\">\n                <div className=\"modal-header\">\n                  <h5 className=\"modal-title\" id=\"infoModal\">\n                    About Top Movies\n                  </h5>\n                  <button\n                    type=\"button\"\n                    className=\"close\"\n                    data-dismiss=\"modal\"\n                    aria-label=\"Close\"\n                    onClick={this.closeModal}\n                  >\n                    <span aria-hidden=\"true\">&times;</span>\n                  </button>\n                </div>\n                <div className=\"modal-body\">\n                  <ul>\n                    <li>Top Movies shows all movies with rate more than 6</li>\n                    <li>Movies can be filtered with genres & years</li>\n                    <li>\n                      By selecting the movie , you can see more details about\n                      the movie like staff , revenue , ...etc\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </Modal>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport Footer from \"./components/footer\";\nimport NavBar from \"./components/navBar\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.Fragment>\n      <NavBar />\n      <App />\n      <Footer />\n    </React.Fragment>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/spinner-loading.ff6e5c7f.svg\";"],"sourceRoot":""}